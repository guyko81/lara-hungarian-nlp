# -*- coding: UTF-8 -*-

import pytest
import os.path, sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))
from lara import nlp, parser

@pytest.mark.parametrize("intents,text,match", [
	(	
		[
			{
				"alma"			: [{"stem":"alma","wordclass":"noun"}],
				"szed"			: [{"stem":"szed","wordclass":"verb"}]
			},
			{
				"piros"			: [{"stem":"piros","wordclass":"adjective"}]
			},
			{
				"zold"			: [{"stem":"z√∂ld","wordclass":"adjective"}]
			}
		],
		[
			"M√°r a z√∂ld alm√°kat is szedjem le, vagy cask a pirosakat?",
			"M√°r a z√∂ld alm√°kat is szedjem le, vagy cask a pirosakat?",
			"M√°r a z√∂ld alm√°kat is szedjem le, vagy cask a pirosakat?",
			"M√°r a z√∂ld alm√°kat is szedjem le, vagy cask a pirosakat?"
		],
		[
			{'alma': 1, 'szed': 2},
			{'alma': 1, 'szed': 2, 'piros': 2},
			{'alma': 1, 'szed': 2, 'piros': 2, 'zold': 2},
			{'alma': 1, 'szed': 2, 'piros': 2, 'zold': 2}
		]
	),
])
def test_parser_intents_add(intents,text,match):
	test	= []
	test.append(parser.Intents(intents[0]))
	test.append(test[0]+parser.Intents(intents[1]))
	test.append(test[1]+intents[2])
	test.append(parser.Intents(str(test[2]),True))
	for i in range(len(text)):
		result	= test[i].match(text[i])
		assert match[i] == result
		
@pytest.mark.parametrize("intent,text,match", [
    (	
		{
			"alma"			: [{"stem":"alma","wordclass":"noun"}],
			"szed"			: [{"stem":"szed","wordclass":"verb"}],
			"piros"			: [{"stem":"piros","wordclass":"adjective"}]
		},
		[
			"Mikor szedj√ºk le a pirosabb alm√°kat?"
		],
		[
			{'alma': 1, 'szed': 2, 'piros': 2}
		]
	),
	(
		{
			"to_do"			: [{"stem":"csin√°l","wordclass":"verb"}],
		},
		[
			"≈ê mit csin√°l a szob√°ban?",
			"Mit fogok m√©g csin√°lni?",
			"Mikor csin√°ltad meg a szekr√©nyt?",
			"Megcsin√°ltatt√°k a berendez√©st.",
			"Teljesen kicsin√°lva √©rzem magamat ett≈ël a melegt≈ël.",
			"Csin√°lhatott volna m√°st is.",
			"Visszacsinalnad az ekezeteket a billentyuzetemen, kerlek?"
		],
		[
			{'to_do': 2},
			{'to_do': 2},
			{'to_do': 2},
			{'to_do': 2},
			{'to_do': 2},
			{'to_do': 2},
			{'to_do': 1}
		]
	),
	(
		{
			"palyaudvar"	: [{"stem":"p√°lyaudvar","wordclass":"noun","prefix":["busz"]}],
			"auto"			: [{"stem":"aut√≥","wordclass":"noun","affix":["busz"]}],
			"szinten_jo"	: [{"stem":"p√°lya","wordclass":"noun","prefix":["busz"],"affix":["udvar"]}]
		},
		[
			"Lassan be√©r√ºnk az aut√≥val a p√°lyaudvarra.",
			"Lassan be√©r√ºnk az aut√≥busszal a buszp√°lyaudvarra."
		],
		[
			{'palyaudvar': 2, 'auto': 2, 'szinten_jo': 2},
			{'palyaudvar': 2, 'auto': 1, 'szinten_jo': 2}
		]
	),
	(
		{
			"enni"		: [{"stem":"esz","wordclass":"verb","match_stem":False},{"stem":"en","wordclass":"verb","match_stem":False}]
		},
		[
			"T≈ëmorf√©m√°k: esz, en.",
			"Eszel valamit?",
			"Azt nem lehet megenni."
		],
		[
			{},
			{'enni': 2},
			{'enni': 2}
		]	
	),
	(
		{
			"jo_ido"	: [{"stem":"j√≥","wordclass":"adjective","inc":[{"stem":"id≈ë","wordclass":"noun","affix":["j√°r√°s"]},{"stem":"meleg","wordclass":"adjective"}]}]
		},
		[
			"J√≥.",
			"Meleg van.",
			"Milyen az id≈ëj√°r√°s?",
			"J√≥ meleg van.",
			"J√≥ az id≈ë.",
			"J√≥ meleg az id≈ë.",
			"J√≥ meleg az id≈ëj√°r√°s."
		],
		[
			{},
			{},
			{},
			{'jo_ido': 2},
			{'jo_ido': 2},
			{'jo_ido': 4},
			{'jo_ido': 4}
		]
	),
	(
		{
			"jobb_ido"	: [{"stem":"j√≥","wordclass":"adjective",
							"inc":[{"stem":"id≈ë","wordclass":"noun","affix":["j√°r√°s"]},{"stem":"meleg","wordclass":"adjective"}],
							"exc":[{"stem":"este","wordclass":"noun"}]}]
		},
		[
			"J√≥.",
			"J√≥ meleg az id≈ëj√°r√°s.",
			"J√≥ est√©t!",
			"J√≥ meleg est√©nk van!"
		],
		[
			{},
			{'jobb_ido': 4},
			{},
			{}
		]
	),
	(
		{
			"megszerel"	: [{"stem":"szerel","wordclass":"verb"}],
			"hibasan"		: [{"stem":"alma","wordclass":"noun"}],
		},
		[
			"Gy√∂ny√∂r≈± dolog a szerelem",
			"Ezt is elfogadja tal√°latk√©nt: Almain√ºdb√∂z"
		],
		[
			{'megszerel': 2},
			{'hibasan': 2}
		]
	),
	(
		{
			"float"		: [{"stem":"a","score":.75},{"stem":"b","score":.6,"typo_score":1}],
		},
		[
			"a b c"
		],
		[
			{'float': 3.1},
		]
	),
])
def test_parser_intents_match(intent,text,match):
	test	= parser.Intents(intent)
	for i in range(len(text)):
		result	= test.match(text[i])
		assert match[i] == result

@pytest.mark.parametrize("intent,text,match", [
	(
		{
			"change"	: [{"stem":"sz√©p","wordclass":"adjective"}],
			"typo"		: [{"stem":"g√∂rbe","wordclass":"adjective"}],
			"fail"			: [{"stem":"k√©k","wordclass":"adjective"}]
		},
		[
			"Szebb s√°rga b√∂gre g√∂bre b√∂gre."
		],
		[
			['change','typo']
		]
	),
	(
		{
			"capital"		: [{"stem":"NAGY","wordclass":"adjective","ignorecase":False}],
			"lower"		: [{"stem":"kicsi","wordclass":"adjective","ignorecase":False}],
			"any"			: [{"stem":"V√°LtAkOz√ì","wordclass":"adjective","ignorecase":True}],
			"acr"			: [{"stem":"KFT","ignorecase":False}]
		},
		[
			"legesLEGNAGYobb kicsiNEK v√ÅlTaKoZ√≥ sz√∂veg kft"
		],
		[
			['capital','lower','any']
		]
	),
	(
		{
			"szoto"		: [{"stem":"t√∂v","wordclass":"noun","match_stem":False,"prefix":["sz√≥"]}],
			"ragoz"		: [{"stem":"ragozatlan","wordclass":"adjective","match_stem":False}],
			"talal"		: [{"stem":"tal√°l","wordclass":"verb","match_stem":False}],
			"talan"		: [{"stem":"TAL√ÅN","wordclass":"verb","match_stem":False,"ignorecase":False}]
		},
		[
			"SZ√ìT√ñVEK SZ√ìT√ñVEK SZ√ìT√ñVEK",
			"Sz√≥t√∂vet RAGOZATLANUL nem tal√°l meg. TAL√ÅN √≠gy?",
			"Ebben semmi sincs"
		],
		[
			['szoto'],
			['szoto','ragoz'],
			[]
		]
	)
])
def test_parser_intents_match_set(intent,text,match):
	test	= parser.Intents(intent)
	for i in range(len(text)):
		result	= test.match_set(text[i])
		assert set(match[i]) == result

@pytest.mark.parametrize("intent,text,best", [
	(	
		{
			"kave"			: [{"stem":"k√°v√©","wordclass":"noun","affix":["g√©p"]}],
			"takarit"			: [{"stem":"takar√≠t","wordclass":"verb"}],
			"sehol"			: [{"stem":"sehol"}]
		},
		[
			"Valakinek ki kellene takar√≠tani a k√°v√©g√©pet. Tegnap is √©n takar√≠tottam ki.",
			"K√°v√© k√°v√©t k√°v√©nk k√°v√©m. Takar√≠t.",
			"K√°v√© k√°v√©t k√°v√©nk k√°v√©m. Takar√≠t."
		],
		[
			{'takarit': 4},
			{'kave': 8, 'takarit': 2},
			{'kave': 8, 'takarit': 2}
		]
	),
])
def test_parser_intents_match_best(intent,text,best):
	test	= parser.Intents(intent)
	for i in range(len(text)):
		result	= test.match_best(text[i],i+1)
		assert best[i] == result

@pytest.mark.parametrize("intent,text,order,preference", [
	(	
		{
			"alma"		: [{"stem":"alma","wordclass":"noun"}],
			"szed"		: [{"stem":"szed","wordclass":"verb"}],
			"k√∂rte"		: [{"stem":"k√∂rte","wordclass":"noun"}]
		},
		[
			"Mikor szedj√ºk le a pirosabb alm√°kat?",
			"Mikor szedj√ºk le a pirosabb alm√°kat?",
			"Mikor szedj√ºk le a pirosabb alm√°kat?",
			"Mikor szedj√ºk le a pirosabb alm√°kat?"
		],
		[
			["k√∂rte"],
			["k√∂rte","szed"],
			["k√∂rte","alma"],
			["alma","szed"],
		],
		[
			"szed",
			"szed",
			"alma",
			"alma"
		]
	),
])
def test_parser_intents_match_order(intent,text,order,preference):
	test	= parser.Intents(intent)
	for i in range(len(text)):
		result	= test.match_order(text[i],order[i])
		assert preference[i] == result
		
@pytest.mark.parametrize("intent,text,best", [
	(	
		{
			"kave"			: [{"stem":"k√°v√©","wordclass":"noun","affix":["g√©p"]}],
			"takarit"			: [{"stem":"takar√≠t","wordclass":"verb"}],
			"sehol"			: [{"stem":"sehol"}]
		},
		[
			"Valakinek ki kellene takar√≠tani a a tudod mit. Tegnap is √©n takar√≠tottam ki.",
			"K√°v√© k√°v√©t k√°v√©nk k√°v√©m. Takar√≠t.",
		],
		[
			{'kave': 0, 'takarit': 4, 'sehol': 0},
			{'kave': 8, 'takarit': 2, 'sehol': 0},
		]
	),
])
def test_parser_intents_match_zeros(intent,text,best):
	test	= parser.Intents(intent)
	for i in range(len(text)):
		result	= test.match(text[i],True)
		assert best[i] == result
		
@pytest.mark.parametrize("intents,text,cleaned", [
	(
		[
			{
				"thanks"	: [{"stem":"k√∂sz√∂n","wordclass":"verb"}]
			},
			{
				"thanks"	: [{"stem":"k√∂sz√∂n","wordclass":"verb","exc":[{"stem":"sz√©p","wordclass":"adjective"}]}]
			},
			{
				"thanks"	: [{"stem":"k√∂sz√∂n","wordclass":"verb","inc":[{"stem":"nagy","wordclass":"adjective"}]}]
			},
			{
				"thanks"	: [{"stem":"k√∂sz√∂n","wordclass":"verb","inc":[{"stem":"kicsi","wordclass":"adjective"}]}]
			},
			{
				"thanks"	: [{"stem":"k√∂sz√∂n","wordclass":"verb","inc":[{"stem":"nagy","wordclass":"adjective"}],"exc":[{"stem":"sz√©p","wordclass":"adjective"}]}]
			}
		],
		[
			"Nagyon sz√©pen k√∂sz√∂n√∂m a teszteket!",
			"Nagyon sz√©pen k√∂sz√∂n√∂m a teszteket!",
			"Nagyon sz√©pen k√∂sz√∂n√∂m a teszteket!",
			"Nagyon sz√©pen k√∂sz√∂n√∂m a teszteket!",
			"Nagyon sz√©pen k√∂sz√∂n√∂m a teszteket!"
		],
		[
			"Nagyon sz√©pen a teszteket!",
			"Nagyon sz√©pen k√∂sz√∂n√∂m a teszteket!",
			"Nagyon sz√©pen a teszteket!",
			"Nagyon sz√©pen k√∂sz√∂n√∂m a teszteket!",
			"Nagyon sz√©pen k√∂sz√∂n√∂m a teszteket!"
		]
	)
])
def test_parser_intents_clean(intents,text,cleaned):
	for i in range(len(intents)):
		test	= parser.Intents(intents[i])
		result	= nlp.trim(test.clean(text[i]))
		assert cleaned[i] == result
		
@pytest.mark.parametrize("info", [
	(
		{
			"text"		: "teszt sz√∂veg"			
		}
	),
	(
		{
			"text"		: "teszt sz√∂veg https://www.youtube.com/watch?v=dQw4w9WgXcQ",
			"urls"			: ["https://www.youtube.com/watch?v=dQw4w9WgXcQ"],
			"smileys"	: ["=d"]
		}
	),
	(
		{
			"text"		: "@mention",
			"mentions"	: ["@mention"],
		}
	),
	(
		{
			"text"		: "@mention D:",
			"mentions"	: ["@mention"],
			"smileys"	: ["D:"],
		}
	),
	(
		{
			"text"		: ":DDDDdddd :(((8888 :3 http://",
			"smileys"	: [":DDDDdddd",":(((8888",":3"]
		}
	),
	(
		{
			"text"		: "$√ü≈Å≈Ç üçπ-üòÉüçî :) √ü¬§√©$√ó asddasd",
			"emojis"		: ["üçπ","üòÉ","üçî"],
			"smileys"	: [":)"]
		}
	),
	(
		{
			"text"		: "john.doe@gmail.com email",
			"emails"		: ["john.doe@gmail.com"]
		}
	),
	(
		{
			"text"		: "notmention@gmail.com email @mention",
			"emails"		: ["notmention@gmail.com"],
			"mentions"	: ["@mention"]
		}
	)
])
def test_parser_extract(info):
	test	= parser.Extract(info['text'])
	check	= ['mentions','urls','smileys','emojis','emails']
	for item in info:
		if item!='text' and item not in check:
			raise ValueError('Possible typo in test case:',item)
	for item in check:
		result	= eval('test.'+item+'()')
		if item in info:
			assert set(info[item]) == set(result)
		else:
			assert not result

@pytest.mark.parametrize("info", [
	(
		{
			"in"		: "t√≠zenk√©tmilli√≥hatvanezerhetvenegy √©s h√°rommilli√≥ sz√°z huszonkett≈ë vagy m√©g nullamilli√°rd de akkor m√°r kett≈ë kett≈ë tizenkett≈ë :) harmincn√©gy √©s nyolcvan illetve kilencvenezer az √°ll√°s pedig egy-egy √©s v√©g√ºl egy kett≈ë h√°rom",
			"out"		: "12060071 √©s 3000122 vagy m√©g 0 de akkor m√°r 2212 :) 34 √©s 80 illetve 90000 az √°ll√°s pedig 1-1 √©s v√©g√ºl 1 2 3"
		}
	),
	(
		{
			"in"		: "harmincn√©gy lol els≈ë a m√°sodik harmadik :D negyed v√©g√©n √∂t√∂dik√©n mit m√°s csin√°lsz t√≠zenk√©tmilli√≥hatvanezerhetvenegy √©s h√°rommilli√≥ sz√°z huszonkett≈ë vagy m√©g nullamilli√°rd de akkor m√°r kett≈ë kett≈ë tizenkett≈ë :) harmincn√©gy √©s nyolcvan illetve kilencvenezer az √°ll√°s pedig egy-egy √©s v√©g√ºl egy kett≈ë h√°rom",
			"out"		: "34 lol 1 a 2 3 :D negyed v√©g√©n 5√∂dik√©n mit m√°s csin√°lsz 12060071 √©s 3000122 vagy m√©g 0 de akkor m√°r 2212 :) 34 √©s 80 illetve 90000 az √°ll√°s pedig 1-1 √©s v√©g√ºl 1 2 3"
		}
	),
	(
		{
			"in"		: "egymilli√≥ √©s sz√°zezer √©s t√≠zezer √©s t√≠zmilli√≥t√≠z √©s sz√°zezersz√°z",
			"out"		: "1000000 √©s 100000 √©s 10000 √©s 10000010 √©s 100100"
		}
	),
	(
		{
			"in"		: "mennyi egyszer egy √©s k√©tszer kett≈ë?",
			"out"		: "mennyi 1szer 1 √©s 2szer 2?"
		}
	)
])
def test_parser_extract_convert_numbers(info):
	test	= parser.Extract(info['in'])
	assert test.ntext==info['out']
			
@pytest.mark.parametrize("info", [
	(
		{
			"text"		: "120 a 5 100 forint 420 doll√°r 34.56 yen 300 300 √©s 20. 3 √©s 2.3.4 1",
			"function"	: "digits",
			"result"		: ['120', '5100', '420', '3456', '300300', '20', '3', '2341']
		}
	),
	(
		{
			"text"		: "120 a 5 100 forint 420 doll√°r 34.56 yen 300 300 √©s 20. 3 √©s 2.3.4 1",
			"function"	: "digits",
			"args"		: [3],
			"result"		: ['120', '420']
		}
	),
	(
		{
			"text"		: "1-2-0 √©s 420 meg 3.6.0",
			"function"	: "digits",
			"args"		: [3,False],
			"result"		: ['1-2-0', '420', '3.6.0']
		}
	),
	(
		{
			"text"		: "120 a 5 100 forint 420 doll√°r 34.56 yen 78,90 yen 300 300 √©s 20. 3 √©s 2.3.4 1 de -2 j√≥ e √©s a -2.0",
			"function"	: "numbers",
			"result"		: [120.0, 5100.0, 420.0, 34.56, 78.90, 300300.0, 20.0, 3.0, 2.0, 3.4, 1.0, -2.0, -2.0]
		}
	),
	(
		{
			"text"		: "120 a 5 100 forint 420 doll√°r 34.56 yen 300 300 √©s 20. 3 √©s 2.3.4 1 de -2 j√≥ e √©s a -2.0",
			"function"	: "numbers",
			"args"		: [False,False],
			"result"		: [120, 5100, 420, 300300, 20, 3, 1, -2]
		}
	),
	(
		{
			"text"		: "100 a 90% 1100% 123,45% 0.5 % √©s 0,4% valamint .7 %",
			"function"	: "percentages",
			"result"		: [0.90,11.0,1.2345,0.005,0.004,0.007]
		}
	),
	(
		{
			"text"		: "100 a 90% 1100% 123,45% 0.5 % √©s 0,4% valamint .7 %",
			"function"	: "percentages",
			"args"		: [False],
			"result"		: ["90%","1100%","123,45%","0.5 %","0,4%",".7 %"]
		}
	),
	(
		{
			"text"		: "#hashtag #YOLO",
			"function"	: "hashtags",
			"result"		: ["#hashtag","#yolo"]
		}
	),
	(
		{
			"text"		: "#hashtag #YOLO",
			"function"	: "hashtags",
			"args"		: [False],
			"result"		: ["#hashtag","#YOLO"]
		}
	),
	(
		{
			"text"		: "H√≠vj fel! A sz√°mom (06 30) 123/45 67!",
			"function"	: "phone_numbers",
			"result"		: ['+36 30 1234567']
		}
	),
	(
		{
			"text"		: "H√≠vj fel! A sz√°mom (0630) 123/45 67!",
			"function"	: "phone_numbers",
			"args"		: [False],
			"result"		: ['(0630) 123/45 67']
		}
	),
	(
		{
			"text"		: "5 000 YEN vagy 5 000‚Ç¨ vagy 5000 fontot 5000¬£",
			"function"	: "currencies",
			"result"		: ["5000.0 JPY","5000.0 EUR","5000.0 GBP","5000.0 GBP"],
		}
	),
	(
		{
			"text"		: "$5 000 vagy 5 000$ vagy 5000 doll√°r 5000.-",
			"function"	: "currencies",
			"args"		: [False],
			"result"		: ["$5 000","5 000$","5000 doll√°r","5000.-"],
		}
	),
	(
		{
			"text"		: "adj nekem $99,99-et meg 19 doll√°rt √©s 99 centet!",
			"function"	: "currencies",
			"result"		: ["99.99 USD", "19.99 USD"]
		}
	),
	(
		{
			"text"		: "adj nekem $99,99-et meg 19 doll√°rt √©s 99 centet!",
			"function"	: "currencies",
			"args"		: [False],
			"result"		: ["$99,99", "19 doll√°rt √©s 99 centet"]
		}
	),
	(
		{
			"text"		: "csak 1 000 000 van ide √≠rva",
			"function"	: "currencies",
			"result"		: ["1000000.0 HUF"],
		}
	),
	(
		{	
			"text"		: "tal√°lkozzunk h√°romnegyed 3 el≈ëtt 4 perccel, holnap!",
			"function"	: "times",
			"args"		: [False,False,0],
			"result"		: ["h√°romnegyed 3 el≈ëtt 4 perccel, holnap"]
		}
	),
	(
		{	
			"text"		: "3 √≥ra 4 perc",
			"function"	: "times",
			"args"		: [True,False,0],
			"result"		: ["03:04"]
		}
	),
	(
		{	
			"text"		: "h√°rom √≥ra n√©gy perc",
			"function"	: "times",
			"args"		: [True,True,10],
			"result"		: ["15:04"]
		}
	),
	(
		{	
			"text"		: "tal√°lkozzunk 10 perccel 9 el≈ëtt vagy 20 perccel 20 el≈ëtt vagy ak√°r nekem 10 perccel 20 ut√°n is j√≥",
			"function"	: "times",
			"args"		: [True,False,10],
			"result"		: ["20:50","19:40","20:10"]
		}
	),
	(
		{	
			"text"		: "10:30 sim√°n, de reggel 9-t≈ël este 10-ig √©s holnap 4-kor vagy holnap d√©lut√°n 4-kor illetve 8-kor √©s holnap 8-kor",
			"function"	: "times",
			"args"		: [True,False,10],
			"result"		: ["10:30","09:00","22:00","16:00","16:00","20:00","20:00"]
		}
	),
	(
		{	
			"text"		: "f√©l 3 ut√°n 2 perccel vagy h√°romnegyed 2 k√∂r√ºl vagy f√©l 5 el≈ëtt vagy 5 el≈ëtt 2 perccel vagy f√©l 5 el≈ëtt 2 perccel vagy 2 perccel f√©l 5 el≈ëtt vagy f√©l 5 ut√°n vagy f√©l 5 ut√°n 2 perccel vagy 2 perccel f√©l 5 ut√°n",
			"function"	: "times",
			"args"		: [True,False,10],
			"result"		: ["14:32","13:45","16:30","16:58","16:28","16:28","16:30","16:32","16:32"]
		}
	),
	(
		{	
			"text"		: "H√≠vj fel ezen a sz√°mon 2018 IV. huszadik√°n mondjuk d√©lut√°n nyolc perccel h√°romnegyed kett≈ë el≈ëtt!",
			"function"	: "times",
			"args"		: [True,True,10],
			"result"		: ["13:37"]
		}
	),
	(
		{	
			"text"		: "H√≠vj fel ezen a sz√°mon 2018 IV. huszadik√°n mondjuk d√©lut√°n nyolc perccel h√°romnegyed kett≈ë el≈ëtt!",
			"function"	: "dates",
			"args"		: [True],
			"result"	: ["2018-04-20"]
		}
	),
	(
		{
			"text"		: "18/01/09 vagy 18-01-09 vagy 2018. 01. 09. vagy 2018. 01. 09-√©n vagy 2018 VII 20. √©s √≠gy 2018 janu√°r 20-√°n",
			"function"	: "dates",
			"args"		: [False],
			"result"		: ["18/01/09","18-01-09","2018. 01. 09","2018. 01. 09","2018 VII 20","2018 janu√°r 20-√°n"]
		}
	),
	(
		{
			"text"		: "18/01/09 vagy 18-01-09 vagy 2019. 01. 09. vagy 2018. 01. 09-√©n vagy 2018 VII 20. √©s √≠gy 2018 janu√°r 20-√°n",
			"function"	: "dates",
			"args"		: [True],
			"result"		: ["2018-01-09","2018-01-09","2019-01-09","2018-01-09","2018-07-20","2018-01-20"]
		}
	),
	(
		{
			"text"		: "3 √≥ra m√∫lva vagy 12 percen bel√ºl de ak√°r 2 √©s f√©l √©vvel el≈ëbb is megt√∂rt√©nhet, hogy 5 √≥r√°val vissza kell √°ll√≠tani, az √≥r√°t, mert j√∂tt√∂mre kelet fel≈ël 1,5 h√©t m√∫lva sz√°m√≠tsatok",
			"function"	: "durations",
			"args"		: [True],
			"result"		: [10800.0, 720.0, -78840000.0, -18000.0, 907200.0]
		}
	),
	(
		{
			"text"		: "3 √≥ra √©s 4 perc m√∫lva valamint majd egyszer egy h√©ttel r√°",
			"function"	: "durations",
			"args"		: [False],
			"result"		: ['3 √≥ra √©s 4 perc m√∫lva', '1 7tel r√°']
		}
	),
	(
		{
			"text"		: "3 √≥ra √©s 4 perc m√∫lva valamint majd egyszer 1 h√©ttel r√°",
			"function"	: "durations",
			"args"		: [True],
			"result"		: [11040.0, 604800.0]
		}
	),
	(
		{
			"text"		: "vagyis j√∂v≈ë kedden is tegnapel≈ëtt vagyis m√∫lt h√©t vas√°rnap azaz h√©tf≈ën",
			"function"	: "relative_dates",
			"args"		: [True,'2018-04-01'],
			"result"		: ['2018-04-03', '2018-03-30', '2018-03-25', '2018-03-26']
		}
	),
	(
		{
			"text"		: "vagyis j√∂v≈ë kedden is tegnapel≈ëtt vagyis m√∫lt h√©t vas√°rnap azaz h√©tf≈ën",
			"function"	: "relative_dates",
			"args"		: [False,'2018-04-01'],
			"result"		: ['j√∂v≈ë kedd', 'tegnapel≈ëtt', 'm√∫lt h√©t vas√°rnap', 'h√©tf≈ë']
		}
	),
	(
		{
			"text"		: "d√©lben mi van? akkor tal√°lkozzunk holnap 9 √©s 11 √≥ra k√∂z√∂tt vagy valamikor reggel 7-kor",
			"function"	: "timestamps",
			"args"		: ['2018-04-01 12:00'],
			"result"		: ['2018-04-01 12:00', '2018-04-02 21:00', '2018-04-02 23:00', '2018-04-02 07:00']
		}
	),
	
])
def test_parser_extract_parameter(info):
	test	= parser.Extract(info['text'])
	if 'args' not in info or not info['args']:
		result	= eval('test.'+info['function']+'()')
	else:
		result	= eval('test.'+info['function']+'('+str(info['args']).strip('[]')+')')
	assert info['result'] == result
	